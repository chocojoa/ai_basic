# ================================================================
# 🔒 보안 설정 샘플 파일 (application-secret.yml.sample)
# ================================================================
# 
# 이 파일을 복사하여 application-secret.yml로 이름을 변경하고
# 실제 환경에 맞는 값으로 수정하세요.
#
# ⚠️  주의사항:
# - application-secret.yml 파일은 .gitignore에 포함되어 있습니다
# - 실제 운영 환경에서는 환경 변수나 외부 설정을 사용하세요
# - 모든 보안 관련 정보는 이 파일에서 관리합니다
# ================================================================

# ================================================================
# 🗄️  데이터베이스 설정
# ================================================================
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/your_database_name?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&characterEncoding=UTF-8
    username: ${DB_USERNAME:your_db_username}
    password: ${DB_PASSWORD:your_db_password}
    driver-class-name: com.mysql.cj.jdbc.Driver
    
    # HikariCP 연결 풀 설정
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      max-lifetime: 1200000
      connection-timeout: 20000
      validation-timeout: 3000
      leak-detection-threshold: 60000
      pool-name: HikariPool-BasicProject

# ================================================================
# 🔐 JWT 보안 설정
# ================================================================
jwt:
  # Base64로 인코딩된 비밀키 (최소 256비트 권장)
  # 실제 운영에서는 더 복잡하고 안전한 키를 사용하세요
  secret: ${JWT_SECRET:dGhpc0lzQVNhbXBsZVNlY3JldEtleUZvckpXVFRva2VuR2VuZXJhdGlvblBsZWFzZUNoYW5nZUl0SW5Qcm9kdWN0aW9u}
  
  # 토큰 만료 시간 (초 단위)
  token-validity-in-seconds: ${JWT_TOKEN_VALIDITY:3600}  # 1시간
  
  # 리프레시 토큰 만료 시간 (초 단위)  
  refresh-token-validity-in-seconds: ${JWT_REFRESH_TOKEN_VALIDITY:604800}  # 7일
  
  # 토큰 발행자
  issuer: ${JWT_ISSUER:your-app-name}

# ================================================================
# 📧 이메일 설정 (선택사항)
# ================================================================
spring:
  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:your-email@gmail.com}
    password: ${MAIL_PASSWORD:your-app-password}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
        transport:
          protocol: smtp

# ================================================================
# 📊 액추에이터 보안 설정
# ================================================================
management:
  endpoints:
    web:
      exposure:
        # 운영 환경에서는 필요한 엔드포인트만 노출
        include: ${ACTUATOR_ENDPOINTS:health,info,metrics}
      base-path: /actuator
    jmx:
      exposure:
        exclude: "*"
  
  endpoint:
    health:
      show-details: ${ACTUATOR_HEALTH_DETAILS:when-authorized}
      show-components: ${ACTUATOR_HEALTH_COMPONENTS:when-authorized}
    
  # 액추에이터 보안
  security:
    enabled: true
    roles: ${ACTUATOR_ROLES:ADMIN}

# ================================================================
# 🔒 CORS 설정
# ================================================================
cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:5173}
  allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS,PATCH}
  allowed-headers: ${CORS_ALLOWED_HEADERS:*}
  allow-credentials: ${CORS_ALLOW_CREDENTIALS:true}
  max-age: ${CORS_MAX_AGE:3600}

# ================================================================
# 📝 로깅 설정
# ================================================================
logging:
  level:
    # 루트 로깅 레벨
    root: ${LOG_LEVEL_ROOT:INFO}
    
    # 애플리케이션 로깅 레벨
    com.your.project: ${LOG_LEVEL_APP:DEBUG}
    
    # Spring Security 로깅 (개발 시에만 DEBUG)
    org.springframework.security: ${LOG_LEVEL_SECURITY:INFO}
    
    # SQL 로깅 (개발 시에만)
    org.springframework.jdbc: ${LOG_LEVEL_SQL:INFO}
    
    # MyBatis 로깅
    com.your.project.mapper: ${LOG_LEVEL_MAPPER:DEBUG}
  
  # 로그 파일 설정
  file:
    name: ${LOG_FILE_NAME:logs/application.log}
    max-size: ${LOG_FILE_MAX_SIZE:100MB}
    max-history: ${LOG_FILE_MAX_HISTORY:30}

# ================================================================
# 🌍 다국어 설정 (선택사항)
# ================================================================
spring:
  messages:
    basename: ${MESSAGES_BASENAME:messages}
    encoding: ${MESSAGES_ENCODING:UTF-8}
    cache-duration: ${MESSAGES_CACHE_DURATION:3600}

# ================================================================
# 🔧 애플리케이션 특정 설정
# ================================================================
app:
  # 파일 업로드 설정
  file:
    upload-dir: ${FILE_UPLOAD_DIR:./uploads}
    max-file-size: ${FILE_MAX_SIZE:10MB}
    allowed-extensions: ${FILE_ALLOWED_EXTENSIONS:jpg,jpeg,png,gif,pdf,doc,docx}
  
  # 보안 정책
  security:
    # 비밀번호 정책
    password:
      min-length: ${PASSWORD_MIN_LENGTH:8}
      require-uppercase: ${PASSWORD_REQUIRE_UPPERCASE:true}
      require-lowercase: ${PASSWORD_REQUIRE_LOWERCASE:true}
      require-digit: ${PASSWORD_REQUIRE_DIGIT:true}
      require-special: ${PASSWORD_REQUIRE_SPECIAL:true}
    
    # 로그인 시도 제한
    login:
      max-attempts: ${LOGIN_MAX_ATTEMPTS:5}
      lockout-duration: ${LOGIN_LOCKOUT_DURATION:300}  # 5분
  
  # 캐시 설정
  cache:
    default-ttl: ${CACHE_DEFAULT_TTL:3600}  # 1시간
    max-size: ${CACHE_MAX_SIZE:1000}

# ================================================================
# 📈 모니터링 및 메트릭 설정
# ================================================================
monitoring:
  # 커스텀 메트릭 설정
  metrics:
    enabled: ${METRICS_ENABLED:true}
    include-packages: ${METRICS_PACKAGES:com.your.project}
  
  # 알림 설정 (선택사항)
  alerts:
    enabled: ${ALERTS_ENABLED:false}
    webhook-url: ${ALERTS_WEBHOOK_URL:}
    error-threshold: ${ALERTS_ERROR_THRESHOLD:10}

# ================================================================
# 🔄 Redis 설정 (캐시 사용 시)
# ================================================================
spring:
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    timeout: ${REDIS_TIMEOUT:2000ms}
    lettuce:
      pool:
        max-active: ${REDIS_POOL_MAX_ACTIVE:8}
        max-idle: ${REDIS_POOL_MAX_IDLE:8}
        min-idle: ${REDIS_POOL_MIN_IDLE:0}

# ================================================================
# 🧪 테스트 환경 설정
# ================================================================
---
spring:
  config:
    activate:
      on-profile: test

  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password: 
    driver-class-name: org.h2.Driver
  
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    
logging:
  level:
    com.your.project: DEBUG
    org.springframework.security: DEBUG

# ================================================================
# 🚀 운영 환경 설정 
# ================================================================
---
spring:
  config:
    activate:
      on-profile: prod

logging:
  level:
    root: WARN
    com.your.project: INFO
    org.springframework.security: WARN

management:
  endpoints:
    web:
      exposure:
        include: health,info

# ================================================================
# 📝 설정 가이드
# ================================================================
# 
# 1. 데이터베이스 설정:
#    - url: 실제 데이터베이스 URL로 변경
#    - username/password: 실제 DB 계정 정보로 변경
# 
# 2. JWT 설정:
#    - secret: 안전한 비밀키로 변경 (256비트 이상 권장)
#    - 토큰 만료 시간을 환경에 맞게 조정
#
# 3. 이메일 설정:
#    - 실제 SMTP 서버 정보로 변경
#    - Gmail 사용 시 앱 비밀번호 필요
#
# 4. 환경 변수 사용 예시:
#    export DB_USERNAME=your_real_username
#    export DB_PASSWORD=your_real_password
#    export JWT_SECRET=your_real_jwt_secret
#
# 5. Docker 환경에서 사용 시:
#    environment:
#      - DB_USERNAME=your_real_username
#      - DB_PASSWORD=your_real_password
#
# ================================================================